// –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤. –¢–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞.   –ò–∑—É—á–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤ ‚úÖ

import {createBackMainMenuButtons, MenuMiddleware, MenuTemplate} from 'grammy-inline-menu'
import {menu as registrationInstruction} from './regestration-instruction'
import {TEMPLATE_IMAGE_FILE_ID} from "../../../../config";
import {setUserStep} from "../../../db-manager";

const ROOT_TRIGGER: string = 'project-1/'

const SLIDES = [
    {
        text: 'NFT + GameFi —Å–ª–∞–π–¥ 1',
        type: 'photo',
        media: TEMPLATE_IMAGE_FILE_ID
    },
    {
        text: 'NFT + GameFi —Å–ª–∞–π–¥ 2',
        type: 'photo',
        media: TEMPLATE_IMAGE_FILE_ID
    },
    {
        text: 'NFT + GameFi —Å–ª–∞–π–¥ 3',
        type: 'photo',
        media: TEMPLATE_IMAGE_FILE_ID
    }
]

export const menu = new MenuTemplate(
    (ctx: any) => {
        return SLIDES[ctx?.session?.slide || 0]
    }
)
// menu.url('–¢–µ–∫—Å—Ç + —Å—Å—ã–ª–∫–∏', 'https://google.com')
// menu.url('–¢–µ–∫—Å—Ç + —Å—Å—ã–ª–∫–∏', 'https://google.com')


menu.interact('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è', 'done', {
    hide: ctx => {
        return ctx.session.slide !== SLIDES.length - 1
    },
    do: async (ctx: any) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        const userID = ctx.from.id
        ctx.reply('<b>üîó–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã: </b>', {
            parse_mode: "HTML"
        })
        setUserStep(userID, 'get-project-links')
        //ctx.answerCallbackQuery('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º,—Ç–µ–ø–µ—Ä—å –≤—ã –ø–∞—Ä—Ç–Ω–µ—Ä!')

        // db.users.updateOne({userID},
        //     {$set: {partner: true}},
        //     {upsert: true})

        return '/'
    }
})
menu.interact('–î–∞–ª–µ–µ', 'next', {
    hide: ctx => {
        return ctx.session.slide >= SLIDES.length - 1
    },
    do: ctx => {
        ctx.session.slide++
        return true
    }
})

menu.interact('–ù–∞–∑–∞–¥', 'back', {
    hide: ctx => {
        return ctx.session.slide === 0
    },
    do: ctx => {
        ctx.session.slide--
        return true
    }
})

//menu.submenu('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'registration-instruction', registrationInstruction)
//menu.manualRow(createBackMainMenuButtons('–ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
const middleware = new MenuMiddleware(ROOT_TRIGGER, menu)

export default middleware
// export {menu, middleware}
